<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbxImagen.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>