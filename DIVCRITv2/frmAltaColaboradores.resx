<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbxImagen.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>